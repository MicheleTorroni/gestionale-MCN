package guiDetails;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.sql.SQLException;

import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;

import entita.Prodotto;
import utility.ColorView;
import utility.DbHelper;

public class PanelDetailsProdotto extends JPanel {

	
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	JPanel grid = new JPanel(new GridBagLayout());
	GridBagConstraints gbc = new GridBagConstraints();
	JLabel descrizione = new JLabel("descrizione");
	JLabel tipo = new JLabel("tipo");
	JLabel areaDescrizione = new JLabel();
	JLabel areaTipo = new JLabel("da riempire");
	JLabel placeholder = new JLabel(" ");
		
		//-------------------------materialetop
		JLabel tipologiaTop = new JLabel("tipologia top");
		JLabel areaTipologiaTop = new JLabel();
		JLabel colore = new JLabel("colore");
		JLabel areaColore = new JLabel();
		JLabel tipoLama = new JLabel("tipo lama");
		JLabel areaTipoLama = new JLabel();
		//costoM2
		//-------------------------base
		JLabel tipologiaBase = new JLabel("tipologia base");
		JLabel areaTipologiaBase = new JLabel();
		//tipoLama
		//costoM2
		//-------------------------antinciampo
		JLabel tipologiaAntinciampo = new JLabel("tipologia antinciampo");
		JLabel areaTipologiaAntinciampo = new JLabel();
		//tipoLama
		//costoM2
		//-------------------------neon
		JLabel costoM = new JLabel("costo m");
		JLabel areaCostoM = new JLabel();
		//-------------------------led
		JLabel costoUnitario = new JLabel("costo unitario");
		JLabel areaCostoUnitario = new JLabel();
		//-------------------------materialetelaio
		JLabel tipologiaTelaio = new JLabel("tipologia telaio");
		JLabel areaTipologiaTelaio = new JLabel();
		JLabel tipoFresa = new JLabel("tipo fresa");
		JLabel areaTipoFresa = new JLabel();
		JLabel costoM2 = new JLabel("costo mQ");
		JLabel areaCostoM2 = new JLabel();
		
		
		JButton elimina = new JButton("elimina");
	
	public PanelDetailsProdotto(Prodotto prodotto,  FrameForDetails padre) {
		this.padre = padre;
		this.prodotto = prodotto;
		
		inizializzazione(prodotto);
		
		this.setLayout(new BorderLayout());
		this.add(grid);
		
		funzioniBottoni(padre, prodotto);
		riempiGriglia(prodotto.getTipologiaProdotto());
		colori();
		dimensioni();
		
	}
	
	private void inizializzazione(Prodotto p) {
		areaDescrizione.setText(p.getDescrizione());
		areaTipo.setText(p.getTipologiaProdotto());
		//----------------------MATERIALETOP
		areaTipologiaTop.setText(p.getTipologiaTop());;
		areaColore.setText(p.getColore());;
		areaTipoLama.setText(p.getTipoLama());;
		areaCostoM2.setText(p.getCostoM2());;
		//----------------------BASE
		areaTipologiaBase.setText(p.getTipologiaBase());;
		//tipoLama
		//costoM2
		//----------------------ANTINCIAMPO
		areaTipologiaAntinciampo.setText(p.getTipologiaAntinciampo());;
		//tipoLama
		areaCostoM.setText(p.getCostoM());;
		//----------------------MATERIALETELAIO
		areaTipologiaTelaio.setText(p.getCostoM());;
		areaTipoFresa.setText(p.getTipoFresa());;
		//costoM2
		//----------------------NEON
		//costoM
		//----------------------LED
		areaCostoUnitario.setText(p.getCostoUnitario());
	}
	
	private void riempiGriglia(String tipo) {
		gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.insets = new Insets(10, 10, 10, 10);
        
        grid.add(descrizione, gbc);
		gbc.gridx++;
		grid.add(areaDescrizione, gbc);
		gbc.gridx = 0;
        gbc.gridy++;
		grid.add(this.tipo, gbc);
		gbc.gridx++;
		grid.add(areaTipo, gbc);
		gbc.gridx = 0;
        gbc.gridy++;
		
        switch(tipo) {
        case "materialetop":
        	grid.add(tipologiaTop, gbc);
    		gbc.gridx++;
    		grid.add(areaTipologiaTop, gbc);
    		gbc.gridx = 0;
            gbc.gridy++;
    		grid.add(colore, gbc);
    		gbc.gridx++;
    		grid.add(areaColore, gbc);
    		gbc.gridx = 0;
            gbc.gridy++;
            grid.add(tipoLama, gbc);
    		gbc.gridx++;
    		grid.add(areaTipoLama, gbc);
    		gbc.gridx = 0;
    		gbc.gridy++;
    		grid.add(costoM2, gbc);
    		gbc.gridx++;
    		grid.add(areaCostoM2, gbc);
    		gbc.gridx = 0;
    		gbc.gridy++;
        	break;
		case "base":
			grid.add(tipologiaBase, gbc);
    		gbc.gridx++;
    		grid.add(areaTipologiaBase, gbc);;
    		gbc.gridx = 0;
            gbc.gridy++;
            grid.add(tipoLama, gbc);
    		gbc.gridx++;
    		grid.add(areaTipoLama, gbc);
    		gbc.gridx = 0;
    		gbc.gridy++;
    		grid.add(costoM2, gbc);
    		gbc.gridx++;
    		grid.add(areaCostoM2, gbc);
    		gbc.gridx = 0;
    		gbc.gridy++;    	
		    break;
		case "antinciampo":
			grid.add(tipologiaAntinciampo, gbc);
    		gbc.gridx++;
    		grid.add(areaTipologiaAntinciampo, gbc);;
    		gbc.gridx = 0;
            gbc.gridy++;
            grid.add(tipoLama, gbc);
    		gbc.gridx++;
    		grid.add(areaTipoLama, gbc);
    		gbc.gridx = 0;
    		gbc.gridy++;
    		grid.add(costoM2, gbc);
    		gbc.gridx++;
    		grid.add(areaCostoM2, gbc);
    		gbc.gridx = 0;
    		gbc.gridy++;
			break;
		case "neon":
			grid.add(costoM, gbc);
    		gbc.gridx++;
    		grid.add(areaCostoM, gbc);;
    		gbc.gridx = 0;
            gbc.gridy++;
			break;
		case "led":
			grid.add(costoUnitario, gbc);
    		gbc.gridx++;
    		grid.add(areaCostoUnitario, gbc);;
    		gbc.gridx = 0;
            gbc.gridy++;
			break;
		case "materialetelaio":
			grid.add(tipologiaTelaio, gbc);
    		gbc.gridx++;
    		grid.add(areaTipologiaTelaio, gbc);
    		gbc.gridx = 0;
            gbc.gridy++;
    		grid.add(tipoFresa, gbc);
    		gbc.gridx++;
    		grid.add(areaTipoFresa, gbc);
    		gbc.gridx = 0;
    		gbc.gridy++;
    		grid.add(costoM2, gbc);
    		gbc.gridx++;
    		grid.add(areaCostoM2, gbc);
    		gbc.gridx = 0;
    		gbc.gridy++;
			break;
		default: System.out.println("errore scelta tipo materiale");
	
        }

		
		
		
        grid.add(placeholder, gbc);
        gbc.gridy++;
		grid.add(elimina, gbc);;
	}
	
	private void colori() {
		this.setBackground(ColorView.myGray());
		grid.setBackground(ColorView.myGray());
		elimina.setBackground(ColorView.myOrange());
		
		tipologiaTop.setForeground(Color.WHITE);
		colore.setForeground(Color.WHITE);
		tipoLama.setForeground(Color.WHITE);
		tipologiaBase.setForeground(Color.WHITE);
		tipologiaAntinciampo.setForeground(Color.WHITE);
		costoM.setForeground(Color.WHITE);
		costoUnitario.setForeground(Color.WHITE);
		tipologiaTelaio.setForeground(Color.WHITE);
		tipoFresa.setForeground(Color.WHITE);
		costoM2.setForeground(Color.WHITE);
		areaTipo.setForeground(Color.WHITE);
		elimina.setForeground(Color.WHITE);
		
		areaDescrizione.setForeground(Color.WHITE);
		areaTipologiaTop.setForeground(Color.WHITE);
		areaColore.setForeground(Color.WHITE);
		areaTipoLama.setForeground(Color.WHITE);
		areaTipologiaBase.setForeground(Color.WHITE);
		areaTipologiaAntinciampo.setForeground(Color.WHITE);
		areaCostoM.setForeground(Color.WHITE);
		areaCostoUnitario.setForeground(Color.WHITE);
		areaTipologiaTelaio.setForeground(Color.WHITE);
		areaTipoFresa.setForeground(Color.WHITE);
		areaCostoM2.setForeground(Color.WHITE);
		areaTipo.setForeground(Color.WHITE);
		
		descrizione.setForeground(Color.WHITE);
		tipo.setForeground(Color.WHITE);
		areaTipo.setBackground(Color.WHITE);
	}
	
	private void dimensioni() {
		this.setMinimumSize(new Dimension(500, 300));

		elimina.setFont(new Font("TimesRoman", Font.BOLD, 25));
		areaTipo.setFont(new Font("TimesRoman", Font.BOLD, 20));
		
		
		descrizione.setFont(new Font("TimesRoman", Font.PLAIN, 20));
		areaDescrizione.setFont(new Font("TimesRoman", Font.BOLD, 20));
		tipo.setFont(new Font("TimesRoman", Font.PLAIN, 20));
		
		tipologiaTop.setFont(new Font("TimesRoman", Font.PLAIN, 20));
		areaTipologiaTop.setFont(new Font("TimesRoman", Font.BOLD, 20));
		colore.setFont(new Font("TimesRoman", Font.PLAIN, 20));
		areaColore.setFont(new Font("TimesRoman", Font.BOLD, 20));
		tipoLama.setFont(new Font("TimesRoman", Font.PLAIN, 20));
		areaTipoLama.setFont(new Font("TimesRoman", Font.BOLD, 20));
		tipologiaBase.setFont(new Font("TimesRoman", Font.PLAIN, 20));
		areaTipologiaBase.setFont(new Font("TimesRoman", Font.BOLD, 20));
		costoM.setFont(new Font("TimesRoman", Font.PLAIN, 20));
		areaCostoM.setFont(new Font("TimesRoman", Font.BOLD, 20));
		costoUnitario.setFont(new Font("TimesRoman", Font.PLAIN, 20));
		areaCostoUnitario.setFont(new Font("TimesRoman", Font.BOLD, 20));
		tipologiaTelaio.setFont(new Font("TimesRoman", Font.PLAIN, 20));
		areaTipologiaTelaio.setFont(new Font("TimesRoman", Font.BOLD, 20));
		tipoFresa.setFont(new Font("TimesRoman", Font.PLAIN, 20));
		areaTipoFresa.setFont(new Font("TimesRoman", Font.BOLD, 20));
		costoM2.setFont(new Font("TimesRoman", Font.PLAIN, 20));
		areaCostoM2.setFont(new Font("TimesRoman", Font.BOLD, 20));
		
	}
	
	private void funzioniBottoni(FrameForDetails padre, Prodotto prodotto) {
			elimina.addActionListener(e->{
			String codiceProdotto = prodotto.getCodiceProdotto();
			String tipologiaProdotto = prodotto.getTipologiaProdotto();
			
			try {
				DbHelper.eliminaProdotto(codiceProdotto);
			} catch (ClassNotFoundException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
			switch(tipologiaProdotto) {
			case "materialetop":
				try {
					DbHelper.eliminaMaterialeTop(codiceProdotto);
				} catch (ClassNotFoundException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				break;
			case "base":
				try {
					DbHelper.eliminaBase(codiceProdotto);
				} catch (ClassNotFoundException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				break;
			case "antinciampo":
				try {
					DbHelper.eliminaAntinciampo(codiceProdotto);
				} catch (ClassNotFoundException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				break;
			case "materialeTelaio":
				try {
					DbHelper.eliminaMaterialeTelaio(codiceProdotto);
				} catch (ClassNotFoundException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				break;
			case "neon":
				try {
					DbHelper.eliminaNeon(codiceProdotto);
				} catch (ClassNotFoundException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				break;
			case "led":
				try {
					DbHelper.eliminaLed(codiceProdotto);
				} catch (ClassNotFoundException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				break;
			}
			padre.dispose();
			try {
				padre.aggiornaCreatore();
			} catch (ClassNotFoundException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		});
			
			
	}
	
	
}
